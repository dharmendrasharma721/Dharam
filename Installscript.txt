
//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"


//---------------------------------------------------------------------------                                                                        
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------

function OnFirstUIBefore()
    number  nResult, nLevel, nSize, nSetupType;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile, szLicenseKey;
    string  szName, szCompany, szTargetPath, szDir, szFeatures;
    BOOL    bLicenseAccepted;
begin	

    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
   
    nSetupType = COMPLETE;	
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = "";
    szMsg = "";
    nResult = SdWelcome( szTitle, szMsg );
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense2:
    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    szLicenseFile = SUPPORTDIR ^ "license.txt";
    nResult = SdLicense2Ex( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted, TRUE );
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif;
/*
Dlg_SdRegisterUser:
    szMsg = "";
    szTitle = "";
    szLicenseKey = "";
    //{{IS_SCRIPT_TAG(Dlg_SdRegisterUser)	
    nResult = SdRegisterUserEx( szTitle, szMsg, szName, szCompany, szLicenseKey);
    //}}IS_SCRIPT_TAG(Dlg_SdRegisterUser)
    if (nResult = BACK) goto Dlg_SdLicense2;
*/
Dlg_SetupType2:   
    szTitle = "";
    szMsg = "";
    nResult = CUSTOM;
   if (nResult = BACK) then
        goto Dlg_SdLicense2;
    else
        nSetupType = nResult;
        if (nSetupType != CUSTOM) then
            szTargetPath = TARGETDIR;
            nSize = 0;
            FeatureCompareSizeRequired( MEDIA, szTargetPath, nSize );
            if (nSize != 0) then      
                MessageBox( szSdStr_NotEnoughSpace, WARNING );
                goto Dlg_SetupType2;
            endif;
        endif;   
    endif;

Dlg_SdAskDestPath2:
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SetupType2;
	szTitle = "";
    szMsg = "";
    if (nSetupType = CUSTOM) then
               
		nResult = SdAskDestPath2( szTitle, szMsg, szDir );
               
        TARGETDIR = szDir;
    endif;
    if (nResult = BACK) goto Dlg_SdLicense2;

Dlg_SdFeatureTree: 
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SdAskDestPath2;
    szTitle = "";
    szMsg = "";
    szFeatures = "";
    nLevel = 2;
    if (nSetupType = CUSTOM) then
       
        if (nResult = BACK) goto Dlg_SdAskDestPath2;  
    endif;

Dlg_SQLServer:
    nResult = OnSQLServerInitialize( nResult );
    if( nResult = BACK ) goto Dlg_SdFeatureTree;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if (nResult = BACK) goto Dlg_SQLServer;
  
Dlg_SdStartCopy2:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdStartCopy2)	
    nResult = SdStartCopy2( szTitle, szMsg );	
    //}}IS_SCRIPT_TAG(Dlg_SdStartCopy2)
    if (nResult = BACK) goto Dlg_ObjDialogs;

    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
 
    return 0;
end;

//---------------------------------------------------------------------------
// OnIISCheckRequirements
//
// The OnIISCheckRequirements event is called by Preprogram to make sure
// that the requirements for IIS runtime are met
//---------------------------------------------------------------------------
function OnIISCheckRequirements()
begin
// obsolete function...moved to after the U.I. to determine user feature selection
	// remove comments below to check for IIS at the very beginning of the install, similar to legacy behavior
	OnIISInitialize();

	// Pass in a component name in your project that contains IIS configuration
	if (ISIISCheckForContinue("AppPoolComponent", FALSE) != 0) then
		MessageBox( @IIS_NOT_INSTALLED, SEVERE );
		abort;
	endif;
end;

//---------------------------------------------------------------------------
// OnUninstall
//
// The OnUninstall event is called when the setup is run with the -uninst
// switch, in this case this is the only event that will be called.
//---------------------------------------------------------------------------
function OnUninstall()
string szIgnore, szMsg;
number nResult;
BOOL bOpt1, bOpt2;
begin

    // Hide the initial progress dialog.
    Disable( DIALOGCACHE );

    // Added in InstallShield 15 - Show an appropriate error message if
    // -uninst is specified and the product is not installed.
    if( !MAINTENANCE ) then
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
	
	// Show Uninstall Confirmation Dialog
	if( MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO ) != IDYES ) then
        abort;
    endif;

    // Remove all features.
	FeatureRemoveAllInMediaAndLog();

    // Added in 11.0, disable the cancel button during uninstall.
    if( REMOVEALLMODE ) then
        Disable( CANCELBUTTON );
    endif;
    
	// Added in 11.0 - Set appropriate StatusEx static text.
	// Moved in 12.1 - Set before calling Enable( STATUSEX ) to ensure proper product name updating.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );

    // Show Status
	SetStatusWindow( 0, "" );
	Enable( STATUSEX );
	StatusUpdate( ON, 100 );


    // Uninstall
	nResult = FeatureTransferData( MEDIA );

    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;
      
    // Disable Status
	Disable( STATUSEX );

    // Show final dialog.
    //if ( BATCH_INSTALL ) then
       // SdFinishReboot( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG2), SYS_BOOTMACHINE, "", 0 );
   // else    
        SdFinish( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG1), "", "" , "", bOpt1 , bOpt2 );
  //  endif;
 
end;


//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2, INSTALLDIR;
    NUMBER bvOpt1, bvOpt2;
begin

    ShowObjWizardPages(NEXT);
    INSTALLDIR = TARGETDIR ^ "\\PlungerAnalysisSoftware\\";
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "View release notes";
    szOpt2 = "Launch Plunger Analysis System";
	bvOpt1   = TRUE;
    bvOpt2   = TRUE;

    RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE );
    RegDBSetKeyValueEx("SOFTWARE\\ABB TotalFlow\\Plunger Analysis System", "Version" , REGDB_STRING, IFX_PRODUCT_VERSION,-1);
    RegDBSetKeyValueEx("SOFTWARE\\ABB TotalFlow\\Plunger Analysis System", "InstallLocation" , REGDB_STRING, INSTALLDIR,-1);
    
	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
	if ( bvOpt1 ) then
		szOpt1 = INSTALLDIR ^ "Release Notes.htm";		
		LaunchAppAndWait( "EXPLORER", INSTALLDIR ^ "Release Notes.htm", NOWAIT );
		Delay(2);
	endif;
	if ( bvOpt2 ) then
		 szOpt2 = INSTALLDIR;
		 ChangeDirectory( INSTALLDIR );
		 szOpt2 = INSTALLDIR ^ "PAS.EXE ";
		 LaunchAppAndWait( szOpt2, " ", NOWAIT );
		 else
		 szOpt2 = INSTALLDIR;
		 ChangeDirectory( INSTALLDIR );
		 szOpt2 = INSTALLDIR ^ "PAS.EXE ";
		 LaunchAppAndWait( szOpt2, "configureHostOnly", NOWAIT );
	endif;
	
	//////Give Permission to IIS_IUSRS
	if(SetObjectPermissions(IISROOTFOLDER+"\\PlungerAnalysis", 
						  IS_PERMISSIONS_TYPE_FOLDER, 
						  "", 
						  "IIS_IUSRS", 
						  FILE_ALL_ACCESS,
						  IS_PERMISSIONS_OPTION_ALLOW_ACCESS
						) != ISERR_SUCCESS) then
	endif;
end;

//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes. Note that this event will be called AFTER "Initialization"
// events (i.e.) OnSetTARGETDIR, OnCheckMediaPassword.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnBegin()
begin	
    // TODO: Perform custom initialization steps, check requirements, etc.
    if (Is(USER_INADMINGROUP,"") = FALSE) then 
		MessageBox( @ADMIN_RIGHT_NOT_AVAILABLE, SEVERE );
		abort;
	endif;
end;

//---------------------------------------------------------------------------
// OnMoveData
//
// The OnMoveData event is called by OnShowUI to initiate the file
// transfer of the setup.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMoveData()
number	nResult, nMediaFlags;
begin

	// Don't install the DISK1COMPONENT if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION = MAINT_OPTION_NONE ) then
		FeatureSelectItem( MEDIA, DISK1COMPONENT, FALSE );
	endif;

    // Updated in 11.5, disable the cancel button during file transfer unless
	// this is non-maintenance mode or repair mode.
    if( MAINTENANCE && ( !REINSTALLMODE || UPDATEMODE ) ) then
        Disable( CANCELBUTTON );
    endif;

    // Show Status
	// Note: Start status window at 1 in case CreateInstallationInfo call
	// is lengthy.
	SetStatusWindow( 1, "" );
	Enable( STATUSEX );
	StatusUpdate( ON, 100 );

	// Create the uninstall infomation (after displaying the progress dialog)
	// Don't create uninstall information if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION != MAINT_OPTION_NONE ) then
		CreateInstallationInfo();
	endif;

	// Move Data
	nResult = FeatureTransferData( MEDIA );
	
    // Moved in 11.0, Check for failure before creating uninstall key.
    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;	    

	// Create uninstall key, if DISK1COMPONENT was installed.
	if( IFX_DISK1INSTALLED ) then

		// Store text-subs for maintenance mode later, only do this when
		// disk 1 is installed. Note that any text-subs that are updated after
        // this call will not be remembered during maintenance mode.
		FeatureSaveTarget("");

		// Write uninstall information.
		MaintenanceStart();

		// Customize Uninstall Information
		OnCustomizeUninstInfo();

	endif;

    // Disable Status
	Disable( STATUSEX );

end;



//---------------------------------------------------------------------------
// OnEnd
//
// The OnEnd event is called at the end of the setup. This event is not
// called if the setup is aborted.
//---------------------------------------------------------------------------
function OnEnd()
begin
            if(REMOVEALLMODE !=0) then //UNINSTALLATION
                        DeleteDir(TARGETDIR+"\\PlungerAnalysisSoftware", ROOT);
                        DeleteDir(IISROOTFOLDER+"\\PlungerAnalysis", ROOT);
            else
                        DeleteFile(IISROOTFOLDER+"\\PlungerAnalysis\\Web.config");
                        CopyFile(TARGETDIR+"\\PlungerAnalysisSoftware\\web.config",IISROOTFOLDER+"\\PlungerAnalysis\\web.config");
                        DeleteFile(TARGETDIR+"\\PlungerAnalysisSoftware\\web.config");
            endif;  
end;

//------------------------------------
// SdWelcomeMaintCustom
//
// This function is custom and written for repair and uninstall screen
//--------------------------------------
prototype SdWelcomeMaintCustom();
function SdWelcomeMaintCustom()
HWND    hwndDlg;
string szTitle, szMsg,szDialogName;
string svValue ;
number  nResult,nCmdValue,nCmdReturned;
BOOL bDone;
LIST listDrive;
string svSelection;
string sText,sProduct;
number RES_PBUT_NEXT,RES_PBUT_CANCEL;
begin
   
            
// Specify a name to identify the custom dialog in this setup.
   szDialogName    = "uninstallDialog";

   // Define the dialog.  Pass a null string in the second parameter
   // to get the dialog from _isuser.dll or _isres.dll.  Pass a null
   // string in the third parameter because the dialog is identified
   // by its ID in the fourth parameter.
   nResult = EzDefineDialog (szDialogName, "", "", 12053);
   bDone = FALSE;
   
   // Loop until done.
   repeat

       	// Display the dialog and return the next dialog event.
       	nCmdValue = WaitOnDialog (szDialogName);             
       	// Respond to the event.
       	switch (nCmdValue)
           	case DLG_CLOSE:
               // The user clicked the window's close button.
               	Do (EXIT);
           	case DLG_ERR:
            MessageBox ("Unable to display dialog. Setup canceled.", SEVERE);
               	abort;
           	case DLG_INIT:
               	// Get the dialog's window handle.
               	hwndDlg = CmdGetHwndDlg (szDialogName);
               
               CtrlSetState ( szDialogName ,302 , BUTTON_CHECKED );
               	// Set the window title.  SetWindowText is prototyped
               	// in Winsub.h and defined in Winsub.rul.                	
               CtrlGetText(szDialogName,710,sText);	               	               
               sProduct=UNINSTALL_DISPLAYNAME;
               Sprintf(sText,sText,sProduct);
			   CtrlSetText(szDialogName,710,sText);	                                     	
               	//CtrlSetText (szDialogName, 301,sMachineDecision);	               	
           	case 9:
                // The user clicked the Cancel button.
                Do (EXIT);
           	case 1:
                 	// Get the current selection so it can be displayed.
                 	//CtrlGetText (szDialogName, 301,sMachineDecision);	
                 	if (CtrlGetState ( szDialogName ,302 )=BUTTON_CHECKED) then
                 	nCmdReturned=REPAIR;
                 	else
                 	nCmdReturned=REMOVEALL;
                 	endif;
                 	bDone = TRUE;            	             
      endswitch;

   until bDone;

   // Close the dialog box.
   EndDialog (szDialogName);

   // Free the dialog box from memory;
   ReleaseDialog (szDialogName);
   
   return nCmdReturned;  

end;



//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// Maintenance UI Sequence - Before Move Data
//
// The OnMaintUIBefore event is called by OnShowUI when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    number	nResult, nType,backupResult,isBackUpRequired;
    string	szTitle, szMsg, backupDirectory,backupExePath,backupDirectoryWithCommand;
begin
	
	// nType defaults to MODIFY.
	nType = MODIFY;

    //Initialize SQL
    OnSQLServerInitializeMaint();

// Beginning of UI Sequence
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
		// In standard mode show maintenance dialog
	    Disable( BACKBUTTON );
	    //nType = SdWelcomeMaint( szTitle, szMsg, nType );
	    nType = SdWelcomeMaintCustom();
	    Enable( BACKBUTTON );
        nResult = NEXT;
    else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );
	    // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;

	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                goto Dlg_Start;
            endif;

		endif;
	endif;

Dlg_SdFeatureTree:
	if ( nType = MODIFY ) then
		szTitle = "";
		szMsg = SdLoadString( SD_STR_COMPONENT_MAINT_MSG );
		nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, "", -1 );
		if ( nResult = BACK ) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    if ( ( nResult = BACK ) && ( nType = MODIFY ) ) goto Dlg_SdFeatureTree;

	switch(nType)

        case REMOVEALL:
			// Show Database Backup Confirmation Dialog
			backupExePath=IISROOTFOLDER+"\\PlungerAnalysis\\bin\\PASDatabaseBackupUtility.exe";		
			isBackUpRequired=MessageBox( @CONFIRM_DB_BACKUP, MB_YESNO );
			if( isBackUpRequired=IDYES ) then
				backupDirectory=TARGETDIR+"\\PlungerAnalysisBackup";
				backupDirectoryWithCommand="BACKUPDB "+ backupDirectory;		
				backupResult=LaunchAppAndWait( backupExePath,backupDirectoryWithCommand,LAAW_OPTION_WAIT);
				backupResult=LAAW_PARAMETERS.nLaunchResult;
				if(backupResult<1)then
						MessageBox("Unable to create backup of the database. Please try again.",SEVERE);
						abort;			
				else	
				if(backupResult==2)then
				    MessageBox("Backup is not created as no database is configured for the application.",INFORMATION);
				else
					MessageBox("Database Backup Created at :" + backupDirectory,INFORMATION);
				endif;
						FeatureRemoveAllInMediaAndLog();
						SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );				
				endif;			
				
			else 
				backupDirectory="NOBACKUP";
				LaunchAppAndWait( backupExePath,backupDirectory,LAAW_OPTION_WAIT);
				// Ensure that all previously installed features are removed.
				FeatureRemoveAllInMediaAndLog();
				// Added in 11.0 - Set appropriate StatusEx static text.
				SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );
			endif;	
        case REPAIR:
				
			// Changed for DevStudio 9, Disk1 files are now always updated when installed
			// so when running from ADDREMOVE we need to prevent these files from being
			// updated since this will result in files being updated that are locked by the setup.
			// Updating these files when running from ADDREMOVE should not be needed since updates
			// are not run directly from Add/Remove.
            if( ADDREMOVE ) then
                // Reinstall all previously installed features, except
                // disk1 features.
                FeatureUpdate( "" );
            else
                // Reinstall all previously installed features.
                FeatureReinstall();
            endif;

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR ) );

        case MODIFY:
            
            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY ) );

    endswitch;
 
end;


// SdRegisterUser -----------------------------------------------------------
function  SdRegisterUser( szTitle, szMsg, svName, svCompany )
    string  szDlg, szTemp;
    number  nId, nMessage, nTemp, nSdDialog;
    HWND    hwndDlg, hwndNext;
    BOOL    bDone;
begin

    szDlg     = SD_DLG_REGISTERUSER;
    nSdDialog = SD_NDLG_REGISTERUSER;

    // record data produced by this dialog
    if(MODE=SILENTMODE) then
        SdMakeName( szAppKey, szDlg, szTitle, nSdRegisterUser );
        SilentReadData( szAppKey, "Result", DATA_NUMBER, szTemp, nId );
        SilentReadData( szAppKey, "szName", DATA_STRING, svName, nTemp );
        SilentReadData( szAppKey, "szCompany", DATA_STRING, svCompany, nTemp );
        IFX_PRODUCT_REGISTEREDOWNER = svName;
        IFX_PRODUCT_REGISTEREDCOMPANY = svCompany;
        return nId;
    endif;

    // ensure general initialization is complete
    if(!bSdInit) then
        SdInit();
    endif;

    if( EzDefineDialog( szDlg, "", "", SD_NDLG_REGISTERUSER ) = DLG_ERR) then
        return -1;
    endif;

    // Loop in dialog until the user selects a standard button
    bDone = FALSE;

    while (!bDone)

        nId = WaitOnDialog( szDlg );

        switch(nId)

        case DLG_INIT:

            if( szMsg != "" ) then
                SdSetStatic( szDlg, SD_STA_MSG, szMsg );
            endif;

            if( !StrLengthChars( svName ) ) then
                svName = IFX_PRODUCT_REGISTEREDOWNER;
            endif;

            if( !StrLengthChars( svCompany ) ) then
                svCompany = IFX_PRODUCT_REGISTEREDCOMPANY;
            endif;

            CtrlSetText( szDlg, SD_EDIT_NAME, svName );
            CtrlSetText( szDlg, SD_EDIT_COMPANY, svCompany );

            hwndDlg = CmdGetHwndDlg( szDlg );
            hwndNext = CtrlGetDlgItem("",  hwndDlg, NEXT );
            SdGeneralInit( szDlg, hwndDlg, STYLE_BOLD, szSdProduct );

            SdSetDlgTitle(szDlg, hwndDlg, szTitle);

        case SD_EDIT_NAME:

            // Enable/Disable next button
            nMessage = CtrlGetSubCommand(szDlg);
            if(nMessage = EDITBOX_CHANGE) then
                CtrlGetText(szDlg, SD_EDIT_NAME, svName);
                StrTrim( svCompany );
                StrTrim( svName );
                EnableWindow( hwndNext, StrLengthChars( svName ) && StrLengthChars( svCompany ) );
            endif;

        case SD_EDIT_COMPANY:

            // Enable/Disable next button
            nMessage = CtrlGetSubCommand(szDlg);
            if(nMessage = EDITBOX_CHANGE) then
                CtrlGetText(szDlg, SD_EDIT_COMPANY, svCompany);
                StrTrim( svCompany );
                StrTrim( svName );
                EnableWindow( hwndNext, StrLengthChars( svName ) && StrLengthChars( svCompany ) );
            endif;

        case NEXT:

            nId    = NEXT;
            bDone  = TRUE;

        case BACK:

            nId    = BACK;
            bDone  = TRUE;

        case BACK:

            nId    = BACK;
            bDone  = TRUE;

        case DLG_ERR:

            SdError( -1, "SdRegisterUser" );
            nId    = -1;
            bDone  = TRUE;

        case DLG_CLOSE:

            SdCloseDlg( hwndDlg, nId, bDone );

        default:

            // check standard handling
            if(SdIsStdButton( nId ) && SdDoStdButton( nId )) then
                bDone = TRUE;
            endif;

        endswitch;

    endwhile;

    IFX_PRODUCT_REGISTEREDOWNER = svName;
    IFX_PRODUCT_REGISTEREDCOMPANY = svCompany;

    // Cleanup Dialog
    EndDialog( szDlg );
    ReleaseDialog( szDlg );
    SdUnInit();

    // record data produced by this dialog
    if(MODE=RECORDMODE) then
        SdMakeName( szAppKey, szDlg, szTitle, nSdRegisterUser );
        SilentWriteData( szAppKey, "szName", DATA_STRING, svName, 0 );
        SilentWriteData( szAppKey, "szCompany", DATA_STRING, svCompany, 0 );
        SilentWriteData( szAppKey, "Result", DATA_NUMBER, "", nId );
    endif;

    return nId;

end;
